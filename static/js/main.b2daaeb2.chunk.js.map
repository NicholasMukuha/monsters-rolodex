{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Cards","props","className","alt","src","monster","id","name","email","company","catchPhrase","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iUAGaA,EAAQ,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACK,qBAAKC,IAAK,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACvB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,QAClB,4BAAIP,EAAMI,QAAQI,QAAQC,kBCFvBC,G,MAAW,SAAAV,GACpB,OAAO,qBAAKC,UAAW,YAAhB,SACND,EAAMW,SAASC,KAAI,SAAAR,GAAO,OACvB,cAAC,EAAD,CAA0BA,QAASA,GAArBA,EAAQC,WCLjBQ,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBAAOC,KAAK,SACZf,UAAY,SACZa,YAAaA,EACbG,SAAYF,MC+BDG,E,kDA/Bb,aAAc,IAAD,8BACX,gBAEKC,MAAQ,CACXR,SAAU,GACVS,YAAa,IALJ,E,qDAUf,WAAoB,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACf,SAAUc,S,oBAExC,WAAS,IAAD,SAC0BE,KAAKR,MAA9BR,EADD,EACCA,SAAUS,EADX,EACWA,YAEXQ,EAAmBjB,EAASkB,QAAO,SAAAzB,GAAO,OAAIA,EAAQE,KAAKwB,cAAcC,SAASX,EAAYU,kBAEpG,OACE,sBAAK7B,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CAAWa,YAAY,iBAAiBC,aAAgB,SAAAiB,GAAC,OAAI,EAAKN,SAAS,CAACN,YAAaY,EAAEC,OAAOC,WAClG,cAAC,EAAD,CAAUvB,SAAYiB,W,GAzBZO,IAAMC,WCKTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b2daaeb2.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.style.css'\r\n\r\nexport const Cards = (props) =>(\r\n     <div className='card-container'>\r\n          <img alt ='Monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n          <h2>{props.monster.name}</h2>\r\n          <p>{props.monster.email}</p>\r\n          <p>{props.monster.company.catchPhrase}</p>\r\n     </div>\r\n)\r\n","import React from 'react';\r\n\r\nimport {Cards} from '../card/card.component'\r\n\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = props => {\r\n    return <div className= 'card-list'>\r\n    {props.monsters.map(monster => (\r\n        <Cards key = {monster.id} monster={monster} />\r\n    ))}\r\n        </div>\r\n}\r\n\r\n","import React from 'react';\r\n\r\nimport './search-box.style.css';\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n    <input type=\"search\"\r\n    className = 'search'\r\n    placeholder={placeholder} \r\n    onChange = {handleChange}\r\n    />\r\n\r\n)","//import logo from './logo.svg';\nimport './App.css';\n//import { ReactComponent } from '*.svg';\nimport React from 'react';\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from './components/search-box/search-box.component';\n\nclass App extends React.Component{\n  constructor(){\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: \"\"\n\n\n    }\n  }\ncomponentDidMount(){\n  fetch('https://jsonplaceholder.typicode.com/users')\n  .then(response => response.json())\n  .then(users => this.setState({monsters: users}));\n}\n  render(){\n    const {monsters, searchField} = this.state;\n\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n\n    return (\n      <div className=\"App\">\n        <h1>Monster Rolodex</h1>\n        <SearchBox placeholder='Search monster' handleChange = {e => this.setState({searchField: e.target.value})}/>\n        <CardList monsters = {filteredMonsters} />\n      </div>\n    );\n  \n}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}